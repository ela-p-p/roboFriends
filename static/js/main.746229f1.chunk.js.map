{"version":3,"sources":["reducers.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","index.js"],"names":["initialSearchState","searchField","initialRobotsState","isPending","robots","error","Card","this","props","user","id","name","email","className","src","alt","Component","Cardlist","map","i","key","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","App","onRequestRobots","onSearchChange","filteredRobot","filter","robot","toLocaleLowerCase","includes","connect","searchRobotsReducer","requestRobotsReducer","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","requestRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.746229f1.chunk.js","sourcesContent":["import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILURE,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nconst initialSearchState = {\n  searchField: \"\"\n};\n\nexport const searchRobotsReducer = (\n  state = initialSearchState,\n  action = {}\n) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, { searchField: action.payload });\n    //or return { ...state, searchField: action.payload}\n    default:\n      return state;\n  }\n};\n\nconst initialRobotsState = {\n  isPending: false,\n  robots: [],\n  error: ''\n};\n\nexport const requestRobotsReducer = (\n  state = initialRobotsState,\n  action = {}\n) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {\n        robots: action.payload,\n        isPending: false\n      });\n    case REQUEST_ROBOTS_FAILURE:\n      return Object.assign({}, state, {\n        error: action.payload,\n        isPending: false\n      });\n    default:\n      return state;\n  }\n};\n","import React, { Component } from \"react\";\n\nclass Card extends Component {\n  render() {\n    const { id, name, email } = this.props.user;\n    return (\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst Cardlist = props => {\n  return props.robots.map((user, i) => <Card key={i} user={user} />);\n};\n\nexport default Cardlist;\n","import React, { Component } from \"react\";\n\nclass SearchBox extends Component {\n  render() {\n    return (\n      <div className=\"pa2\">\n        <input \n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\" \n        placeholder=\"Search for Robots!\"\n        onChange={this.props.searchChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n    render() {\n        if (this.state.error) {\n            return <h1>Ooops. Something broke</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport CardList from \"../components/Cardlist\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport { setSearchField, requestRobots } from \"../actions\";\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobotsReducer.searchField,\n    robots: state.requestRobotsReducer.robots,\n    isPending: state.requestRobotsReducer.isPending,\n    error: state.requestRobotsReducer.error\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => requestRobots(dispatch)\n    //or look like (and see change in 'actions')\n    //onRequestRobots: () => dispatch(requestRobots())\n  };\n};\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobot = robots.filter(robot => {\n      return robot.name\n        .toLocaleLowerCase()\n        .includes(searchField.toLocaleLowerCase());\n    });\n    return isPending ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobot} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILURE,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\nexport const requestRobots = dispatch => {\n    //redux-think looks for functions as opposed to object being returned in 'setSearchField'\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: error }));\n};\n\n// dispatch(requestRobots())-----\n//now we have a higher order function, requestRobots returns a function which uses dispatch to reducer\n\n// export const requestRobots = () => dispatch => {\n//     dispatch({ type: REQUEST_ROBOTS_PENDING });\n//     fetch(\"https://jsonplaceholder.typicode.com/users\")\n//       .then(response => response.json())\n//       .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n//       .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: error }));\n//   };\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILURE = 'REQUEST_ROBOTS_FAILURE'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { searchRobotsReducer, requestRobotsReducer } from \"./reducers\";\nimport \"./index.css\";\nimport App from \"../src/containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({\n  searchRobotsReducer,\n  requestRobotsReducer\n});\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}