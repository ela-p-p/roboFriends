{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","this","props","user","id","name","email","className","src","alt","Component","Cardlist","robots","map","i","key","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","error","App","searchField","onSearchChange","event","setState","target","value","fetch","then","response","json","users","filteredRobot","filter","robot","toLocaleLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6OAgBeA,E,iLAbH,IAAD,EACqBC,KAAKC,MAAMC,KAA/BC,EADD,EACCA,GAAIC,EADL,EACKA,KAAMC,EADX,EACWA,MAClB,OACE,yBAAKC,UAAU,uDACb,yBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,UACpD,6BACE,4BAAKJ,GACL,2BAAIC,S,GARKI,aCKJC,EAJE,SAAAT,GACf,OAAOA,EAAMU,OAAOC,KAAI,SAACV,EAAMW,GAAP,OAAa,kBAAC,EAAD,CAAMC,IAAKD,EAAGX,KAAMA,QCa5Ca,E,iLAbX,OACE,yBAAKT,UAAU,OACb,2BACAA,UAAU,mCACVU,KAAK,SACLC,YAAY,qBACZC,SAAUlB,KAAKC,MAAMkB,oB,GARLV,aCcTW,G,MAdA,SAAAnB,GACb,OACE,yBACEoB,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTvB,EAAMwB,YCGEC,E,2MAXXC,MAAQ,CACJC,OAAO,G,wEAGP,OAAI5B,KAAK2B,MAAMC,MACJ,sDAEJ5B,KAAKC,MAAMwB,a,GAREhB,aC2CboB,E,2MArCbF,MAAQ,CACNhB,OAAQ,GACRmB,YAAa,I,EASfC,eAAiB,SAAAC,GACf,EAAKC,SAAS,CACZH,YAAaE,EAAME,OAAOC,S,mFART,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKP,SAAS,CAAEtB,OAAQ6B,S,+BAQjC,IAAD,EACyBxC,KAAK2B,MAA7BhB,EADD,EACCA,OAAQmB,EADT,EACSA,YACVW,EAAgB9B,EAAO+B,QAAO,SAAAC,GAClC,OAAOA,EAAMvC,KACVwC,oBACAC,SAASf,EAAYc,wBAE1B,OACE,yBAAKtC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,aAAcnB,KAAK+B,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAUpB,OAAQ8B,W,GA9BZhC,aCKEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.a78f8cd6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Card extends Component {\n  render() {\n    const { id, name, email } = this.props.user;\n    return (\n      <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n        <img src={`https://robohash.org/${id}?200x200`} alt=\"robot\" />\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    );\n  }\n}\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst Cardlist = props => {\n  return props.robots.map((user, i) => <Card key={i} user={user} />);\n};\n\nexport default Cardlist;\n","import React, { Component } from \"react\";\n\nclass SearchBox extends Component {\n  render() {\n    return (\n      <div className=\"pa2\">\n        <input \n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\" \n        placeholder=\"Search for Robots!\"\n        onChange={this.props.searchChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        border: \"5px solid black\",\n        height: \"800px\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n    render() {\n        if (this.state.error) {\n            return <h1>Ooops. Something broke</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundary","import React, { Component } from \"react\";\nimport CardList from \"../components/Cardlist\";\nimport SearchBox from \"../components/SearchBox\";\nimport \"./App.css\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\n\nclass App extends Component {\n  state = {\n    robots: [],\n    searchField: \"\"\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ robots: users }));\n  }\n\n  onSearchChange = event => {\n    this.setState({\n      searchField: event.target.value\n    });\n  };\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobot = robots.filter(robot => {\n      return robot.name\n        .toLocaleLowerCase()\n        .includes(searchField.toLocaleLowerCase());\n    });\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobot} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'tachyons'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}